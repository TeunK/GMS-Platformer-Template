<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Solid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MOVESPEED = 8;
JUMPHEIGHT = 14;
GRAVITY = 1;
TERMINAL_VELOCITY = 10;
FRICTION = 1;

Y_BOTTOM = y + (sprite_get_height(sprite_index)/2)
Y_TOP = y - (sprite_get_height(sprite_index)/2)
X_LEFT = x - (sprite_get_width(sprite_index)/2)
X_RIGHT = x + (sprite_get_width(sprite_index)/2)

hspd = 0;
vspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check for ground
if (place_meeting(x, y+1, Solid)) {
    vspd = 0;
    
    // Jumping
    if (UKEY()) {
        vspd = -JUMPHEIGHT;
    }
} else {
    // Gravity
    if (vspd &lt; TERMINAL_VELOCITY) {
        vspd += GRAVITY;
    }
    
    if (UKEY_RELEASED() &amp;&amp; vspd &lt; -(JUMPHEIGHT/2)) {
        vspd = -(JUMPHEIGHT/2);
    }
}

// Moving right
if (LKEY()) {
    if (hspd &gt; -MOVESPEED) {
        hspd -= FRICTION;
    } else {
        hspd = -MOVESPEED
    }
}

// Moving left
if (RKEY()) {
    if (hspd &lt; MOVESPEED) {
        hspd += FRICTION;
    } else {
        hspd = MOVESPEED;
    }
}

// Check for not moving
if ((!RKEY() &amp;&amp; !LKEY()) || (RKEY() &amp;&amp; LKEY())) {
    if (hspd != 0) {
        if (hspd &lt; 0) {
            hspd += FRICTION;
        } else {
            hspd -= FRICTION;
        }
    }
}

// Horizontal collisions
if (place_meeting(x+hspd, y, Solid)) {
    while (!place_meeting(x+sign(hspd), y, Solid)) {
        x += sign(hspd);
    }
    hspd = 0;
}

// Move horizontally
x += hspd;

// Vertical collisions
if (place_meeting(x, y+vspd, Solid)) {
    while (!place_meeting(x, y+sign(vspd), Solid)) {
        y += sign(vspd);
    }
    vspd = 0;
}

// Move vertically
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
